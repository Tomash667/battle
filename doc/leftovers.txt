REMOVED FROM OLD-CORE

//-----------------------------------------------------------------------------
// Object oriented bounding box
//-----------------------------------------------------------------------------
struct Obbox
{
	Vec3 pos;
	Vec3 size;
	Matrix rot;
};
// inna wersja, okaże się czy lepszy algorytm
struct Oob
{
	Vec3 c; // środek
	Vec3 u[3]; // obrót po X,Y,Z
	Vec3 e; // połowa rozmiaru
};

//-----------------------------------------------------------------------------
// KOLIZJE
//-----------------------------------------------------------------------------
// promień - AABOX
bool RayToBox(const Vec3& ray_pos, const Vec3& ray_dir, const Box& box, float* out_t);
// promień - płaszczyzna
bool RayToPlane(const Vec3& ray_pos, const Vec3& ray_dir, const Plane& plane, float* out_t);
// promień - sfera
bool RayToSphere(const Vec3& ray_pos, const Vec3& ray_dir, const Vec3& center, float radius, float& dist);
// promień - trójkąt
bool RayToTriangle(const Vec3& ray_pos, const Vec3& ray_dir, const Vec3& v1, const Vec3& v2, const Vec3& v3, float& dist);
// prostokąt - prostokąt
bool RectangleToRectangle(float x1, float y1, float x2, float y2, float a1, float b1, float a2, float b2);
// okrąg - prostokąt
bool CircleToRectangle(float circlex, float circley, float radius, float rectx, float recty, float w, float h);
// odcinek - odcinek (2d)
bool LineToLine(const Vec2& start1, const Vec2& end1, const Vec2& start2, const Vec2& end2, float* t = nullptr);
// odcinek - prostokąt
bool LineToRectangle(const Vec2& start, const Vec2& end, const Vec2& rect_pos, const Vec2& rect_pos2, float* t = nullptr);
inline bool LineToRectangle(const Vec3& start, const Vec3& end, const Vec2& rect_pos, const Vec2& rect_pos2, float* t = nullptr)
{
	return LineToRectangle(Vec2(start.x, start.z), Vec2(end.x, end.z), rect_pos, rect_pos2, t);
}
inline bool LineToRectangleSize(const Vec2& start, const Vec2& end, const Vec2& rect_pos, const Vec2& rect_size, float* t = nullptr)
{
	return LineToRectangle(start, end, rect_pos - rect_size, rect_pos + rect_size, t);
}
// sześcian - sześcian
bool BoxToBox(const Box& box1, const Box& box2);
// obrócony sześcian - obrócony sześcian
// punkt kontaktu jest opcjonalny (jest to uśredniony wynik z maksymalnie 4 kontaktów)
bool OrientedBoxToOrientedBox(const Obbox& obox1, const Obbox& obox2, Vec3* contact);
// kolizja koło - obrócony prostokąt
bool CircleToRotatedRectangle(float cx, float cy, float radius, float rx, float ry, float w, float h, float rot);
// kolizja dwóch obróconych prostokątów (można by zrobić optymalizacje że jeden tylko jest obrócony ale nie wiem jak :3)
struct RotRect
{
	Vec2 center, size;
	float rot;
};
bool RotatedRectanglesCollision(const RotRect& r1, const RotRect& r2);
inline bool CircleToCircle(float cx1, float cy1, float r1, float cx2, float cy2, float r2)
{
	float r = (r1 + r2);
	return DistanceSqrt(cx1, cy1, cx2, cy2) < r * r;
}
bool SphereToBox(const Vec3& pos, float radius, const Box& box);
// kolizja promienia (A->B) z cylindrem (P->Q, promień R)
int RayToCylinder(const Vec3& ray_A, const Vec3& ray_B, const Vec3& cylinder_P, const Vec3& cylinder_Q, float radius, float& t);
// kolizja Oob z Oob
bool OOBToOOB(const Oob& a, const Oob& b);
// odległość punktu od prostokąta
float DistanceRectangleToPoint(const Vec2& pos, const Vec2& size, const Vec2& pt);
// x0,y0 - point
float PointLineDistance(float x0, float y0, float x1, float y1, float x2, float y2);
float GetClosestPointOnLineSegment(const Vec2& A, const Vec2& B, const Vec2& P, Vec2& result);



VEC4:

static Vec4 FromColor(DWORD color);
inline Vec4 Vec4::FromColor(DWORD color)
{
	Vec4 v;
	v.x = float((color & 0xFF0000) >> 16) / 255;
	v.y = float((color & 0xFF00) >> 8) / 255;
	v.z = float(color & 0xFF) / 255;
	v.w = float((color & 0xFF000000) >> 24) / 255;
	return v;
}
	
	
	
//-----------------------------------------------------------------------------
struct Pixel
{
	Int2 pt;
	byte alpha;

	Pixel(int x, int y, byte alpha = 0) : pt(x, y), alpha(alpha) {}

	static void PlotLine(int x0, int y0, int x1, int y1, float th, vector<Pixel>& pixels);
	static void PlotQuadBezierSeg(int x0, int y0, int x1, int y1, int x2, int y2, float w, float th, vector<Pixel>& pixels);
	static void PlotQuadBezier(int x0, int y0, int x1, int y1, int x2, int y2, float w, float th, vector<Pixel>& pixels);
	static void PlotCubicBezierSeg(int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3, float th, vector<Pixel>& pixels);
	static void PlotCubicBezier(int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3, float th, vector<Pixel>& pixels);
};
